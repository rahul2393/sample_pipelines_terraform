resources:
# AWS credentials
  - name: aws_ec2_tf_creds
    type: integration
    integration: "dr_aws"

# Terraform State
  - name: aws_ec2_tf_state
    type: state

# Output of ec2 provisioning
  - name: aws_ec2_tf_info
    type: params
    versionTemplate:
      params:
        SEED: "initial_version"

jobs:
# Provision AWS ec2 with Terraform
  - name: sample_pipelines_terraform_runCI
    type: runCI
    steps:
      - IN: aws_ec2_tf_state
        switch: off
      - IN: aws_ec2_tf_creds
        switch: off
      - TASK:
          name: prov_ec2
          script:
            - export AWS_ACCESS_KEY_ID=$(shipctl get_integration_resource_field aws_ec2_tf_creds "accessKey")
            - export AWS_SECRET_ACCESS_KEY=$(shipctl get_integration_resource_field aws_ec2_tf_creds "secretKey")
            - echo $AWS_SECRET_ACCESS_KEY
            - shipctl copy_file_from_resource_state aws_ec2_tf_state terraform.tfstate .
            - shipctl replace terraform.tfvars
            - terraform init
            - terraform apply -auto-approve -var-file=terraform.tfvars
      - OUT: aws_ec2_tf_info
        overwrite: true
      - OUT: aws_ec2_tf_state
    on_success:
      script:
        - shipctl put_resource_state_multi aws_ec2_tf_info "versionName=$(terraform output ec2_ins_0_ip)" "ec2_ins_0_ip=$(terraform output ec2_ins_0_ip)"
    always:
      script:
        - shipctl copy_file_to_resource_state terraform.tfstate aws_ec2_tf_state
        - popd
    flags:
      - aws_ec2
      - aws
      - terraform